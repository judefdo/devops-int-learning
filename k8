***** IMPORTANt
https://www.replex.io/blog/kubernetes-in-production-best-practices-for-cluster-autoscaler-hpa-and-vpa
https://aws.amazon.com/blogs/containers/amazon-eks-cluster-multi-zone-auto-scaling-groups/
https://opsani.com/blog/kubernetes-cluster-autoscaling-overview/
https://aws.amazon.com/blogs/compute/run-your-kubernetes-workloads-on-amazon-ec2-spot-instances-with-amazon-eks/
https://rancher.com/docs/rancher/v2.x/en/cluster-admin/cluster-autoscaler/amazon/


QoS - Quality of Service
        1- Guartee --> when memory limit and request are same
        2- Burstable --> when memory limit is more than the request 
        3- Besteffort --> if you don't specify any limit on the pod definition

Defaulf definition: 
       you can specify a yml with limitRange like
        apiVersion: v1
        kind: LimitRange
        metadata:
            name: mem-limit-range
        spec:
            limits:
            - default:
                  memory: 512Mi
            defaultRequest:
                  memory: 256Mi
            type: Container

Initial namespace
  - default
  - kube-system
  - kube-public
              

A Daemon set is a set of pods that runs only once on a host. 
They are used for host layer attributes like a network or for monitoring a network,
 which you may not need to run on a host more than once.

A Heapster is a performance monitoring and metrics collection system for data collected by the Kublet. 
This aggregator is natively supported and runs like any other pod within a Kubernetes cluster, 
which allows it to discover and query usage data from all nodes within the cluster.

The controller manager is a daemon that is used for embedding core control loops, garbage collection, and Namespace creation. 
It enables the running of multiple processes on the master node even though they are compiled to run as a single process.

The primary controller managers that can run on the master node are the 
endpoints controller, service accounts controller, namespace controller, node controller, token controller, and replication controller.

Kubernetes uses etcd as a distributed key-value store for all of its data, including metadata and configuration data, 
and allows nodes in Kubernetes clusters to read and write data. Although etcd was purposely built for CoreOS, 
it also works on a variety of operating systems (e.g., Linux, BSB, and OS X) because it is open-source. 
Etcd represents the state of a cluster at a specific moment in time and is a canonical hub for state management and 
cluster coordination of a Kubernetes cluster.


Kubernetes service without selector, will not create a endpoint. you need to create a end point manually. 

Kubernetes has 3 type of kube-proxy :
  user-space proxy mode:
      It uses proxy-port and uses kube-proxy the SessionAffinity for the service
      Lastly, the user-space proxy installs iptables rules which capture traffic to the Service’s clusterIP (which is virtual) and port. 
      The rules redirect that traffic to the proxy port which proxies the backend Pod. It uses round robin method

  iptable proxy mode:
      Service, it installs iptables rules, which capture traffic to the Service’s clusterIP and port, and 
      redirect that traffic to one of the Service’s backend sets. For each Endpoint object, it installs iptables rules which select a backend Pod.
      It uses linux kernel for processing , kube-proxy in iptables mode chooses a backend at random. It uses readyness probe to 

 IPVS mode: it uses call netlink interface , it uses kernel mode, IPVS mode has higher through put of network traffic


 Discovering services:
   through environement variables and DNS

 Headless Services:
     There is no Cluster IP created or kube-proxy doesn't handle these services, and there is no load balancing and proxying done 
     by platform.
   
An ExternalName Service is a special case of Service that does not have selectors and uses DNS names instead.
ExternalName: Maps the Service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record


kube-proxy : ??


Kubernetes operators -- 


How to add entry to pod /etc/resolv.conf 
Using the pod definition script:
   apiVersion: v1
kind: Pod
metadata:
  namespace: default
  name: dns-example
spec:
  containers:
    - name: test
      image: nginx
  dnsPolicy: "None"
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster-domain.example
      - my.dns.search.suffix
    options:
      - name: ndots
        value: "2"
      - name: edns0

The above pod definition will create an entry in /etc/resolv.conf

nameserver 1.2.3.4
search ns1.svc.cluster-domain.example my.dns.search.suffix
options ndots:2 edns0


The kubelet is a service agent that controls and maintains a set of pods by watching for pod specs through the Kubernetes API server.
 It preserves the pod lifecycle by ensuring that a given set of containers are all running as they should. 
 The kubelet runs on each node and enables the communication between the master and slave nodes.

Control Plan Components
Kube-apiserver. This component is the control plane’s front end.
Etcd. This component is a highly available and consistent key-value store. Etcd acts as the backing store for all Kubernetes cluster data.
Kube-scheduler. This component watches out for newly created pods that lack assigned nodes and chooses nodes for them to run on.
Kube-controller-manager. This component runs the controller process, including node controllers, endpoints controllers, replication controllers, service accounts, and token controllers.
Cloud-controller-manager. The manager links your cluster into your cloud provider's API. It separates the components that interact with the chosen cloud platform from the components that only interact with your cluster.


Node Components
Node components, unsurprisingly, run on each node, where they maintain running pods and provide the Kubernetes runtime environment.

Kubelet. This agent ensures that containers are running in a pod.
Kube-proxy. This proxy maintains network rules on nodes. These rules allow network communication from sessions inside or outside of your cluster to your pods.
Container runtime. This software runs containers. Kubernetes supports various container runtimes like Containerd, CRI-O, Docker, or any Kubernetes Container Runtime Interface (CRI) implementation.


Cluster DNS. Cluster DNS serves DNS records for Kubernetes services. Although addons aren’t strictly mandatory, Kubernetes clusters should have a DNS because many examples depend on it.
Web UI. The Web UI is a general-purpose dashboard for Kubernetes clusters. It lets users manage and troubleshoot the cluster plus any applications running in it.
Container Resource Monitoring. This addon records generic time-series metrics regarding the central database’s containers and provides a UI for browsing the data.
Cluster-Level Logging. This mechanism saves container logs to a central log store with a searching and browsing interface.
Jasonnet

How to secure Kubernetes services?
* Ensure all traffic is TLS
* use api authentication
* make kubeless protect its api via authorizaiton-mode=Webhook
* monitor RBAC failure
* remove default sevice accounts
* filter engress to cloud api 


kubeclt drain to --> to remove all pods from the node
kubectl uncordon --> to allow pods back to drained system

Kubernetes services
Cluster IP Service -- Internal or inside the clusters
Node service -- expose a node on the server
Load Balancer -- Expose the cloud based providers using the LB
External Name -- It is setup by the cname

Difference between replication controllers and replic sets
replication controller is obsolete. the only difference is replication controller don't have selector

Init container vs side car container
  *   Init containers run and exit before your main application starts
  *    Sidecars run side-by-side with your main container(s) and provide some kind of service for them.

The difference between statefulset vs deployments

* A StatefulSet is another Kubernetes controller that manages pods just like Deployments. But it differs from a Deployment in that it is more suited for stateful apps.
* A stateful application requires pods with a unique identity (for example, hostname). One pod should be able to reach other pods with well-defined names.
* For a StatefulSet to work, it needs a Headless Service. A Headless Service does not have an IP address. Internally, it creates the necessary endpoints to expose pods with DNS names. The StatefulSet definition includes a reference to the Headless Service, but you have to create it separately.
* By nature, a StatefulSet needs persistent storage so that the hosted application saves its state and data across restarts. Kubernetes provides Storage Classes, Persistent Volumes, and Persistent Volume Claims to provide an abstraction layer above the cloud provider’s storage-offering mechanism.
Once the StatefulSet and the Headless Service are created, a pod can access another one by name prefixed with the service name.


